{
    "contents" : "loadExpMeasFromRaw <- function(expDat){\n  sampleInfo = expDat$sampleInfo\n  # Pull idCols out of expDat\n  idCols <- sampleInfo$idColsSRM \n  \n  # Import data based on analysis type from SEQC main project\n \n if (sampleInfo$study == \"SEQC_Main\"){\n   nameKey <- data.frame(oldName = c(\"AGR\",\"BGI\",\"CNL\",\"COH\",\"MAY\",\"NVS\",\"NWU\",\n                                     \"PSU\",\"SQW\"), newName = c(\"Lab1\",\"Lab2\",\n                                                               \"Lab3\", \"Lab4\",\n                                                               \"Lab5\", \"Lab6\",\n                                                               \"Lab7\", \"Lab8\", \n                                                               \"Lab9\"))\n   oldName <- nameKey$oldName[which(nameKey$newName == sampleInfo$siteName)]\n   sampleInfo$sample1Name <- \"A\"\n   sampleInfo$sample2Name <- \"B\"\n   \n   # Get total Reads (from the original fastq files)\n   if(sampleInfo$totalSeqReads == T){\n     if(sampleInfo$platform != \"ROC\"){\n       mainReads = read.delim(paste(\"Data/MainSEQC/all_qc_results/\",\n                                    sampleInfo$platform,\"_\",oldName,\"_qc_results.txt\",\n                                    sep=\"\"))\n       mainReads = mainReads[c(1:9)]\n       if(sampleInfo$analysis == \"NIST\"){\n         if (oldName == \"NWU\") mainReads$sampleName <- \n           sub(\"_NWU00001.*\",\"\", mainReads$sampleName)\n         if (oldName == \"SQW\") mainReads$sampleName <- \n           sub(\"_23311016_20120217.*\",\"\", mainReads$sampleName)\n         if (oldName == \"PSU\") mainReads$sampleName <- \n           sub(\"_23302023_20120308.*\",\"\", mainReads$sampleName) \n       }  \n     }else{\n       mainReads = read.delim(\"Data/MainSEQC/RocheResults/Mappability.txt\",\n                              sep = \" \")\n       mainReads = mainReads[c(1,2,4,5)]\n       colnames(mainReads) <- c(\"Site\",\"Sample\", \"Replicate\",\"TotalReads\") \n     }\n   }\n   if (sampleInfo$analysis == \"NCTR\"){\n     dataFile = paste(\"Data/MainSEQC/SEQC_MAIN_ILM_rawCounts_ZSu.2012_04_14/\",\n                      \"SEQC_MAIN_ILM_\",oldName,\"_TranscriptCounts_ZSU.txt\",\n                      sep = \"\")\n     Transcripts = read.delim(dataFile)\n   }\n   if (sampleInfo$analysis == \"NIST\"){\n     dataFile = paste(\"Data/MainSEQC/SEQC_LifescopeCounts/SEQC_LIF_\",\n                      oldName,\"_LifeScope.csv\", sep = \"\")\n     Transcripts = read.csv(dataFile, header = T)\n     newColnames <- colnames(Transcripts)\n     #colnames(Transcripts) <- sub(\"_F3.*\",\"\", newColnames)\n     if (oldName == \"NWU\") colnames(Transcripts) <- \n       sub(\"_NWU00001.*\",\"\",newColnames)\n     if (oldName == \"SQW\") colnames(Transcripts) <- \n       sub(\"_23311016_20120217.*\",\"\", newColnames)\n     if (oldName == \"PSU\") colnames(Transcripts) <- \n       sub(\"_23302023_20120308.*\",\"\", newColnames)\n   } \n   if(sampleInfo$analysis == \"WEHI\"){\n        dataFile = \"Data/MainSEQC/RocheResults/RefSeq-All-Genes.txt\"\n        Transcripts = read.delim(dataFile, header = T)\n        dataAB = Transcripts[-c(1)]\n        Transcripts =cbind(Transcripts[c(1)], dataAB[order(colnames(dataAB))])\n        print(head(Transcripts))\n   }\n   \n   # force names to be ERCC- and first column name to Feature\n   names(Transcripts)[1] = \"Feature\"\n   Transcripts$Feature = gsub(\"ERCC_\",\"ERCC-\",Transcripts$Feature)\n   Transcripts$Feature = gsub(\":Gene_AceView08\",\"\",Transcripts$Feature)\n   Transcripts$Feature = gsub(\":Gene_RefSeq\",\"\",Transcripts$Feature)\n\n   # get data frames with just the ERCCs and just the human genes\n   TranscriptsERCCOnly = Transcripts[c(grep(\"ERCC-0\", Transcripts$Feature)),]\n   TranscriptsHumanOnly = Transcripts[-c(grep(\"ERCC-0\", Transcripts$Feature)),]\n   \n   # Remove ERCCs in the definition file that are not in the count data file\n   idCols = idCols[match(TranscriptsERCCOnly$Feature,idCols$Feature),]\n   \n   # Remove ERCCs without a Ratio\n   idCols = idCols[which(is.finite(idCols$Ratio)),]\n   \n   # Remove ERCCs from count data and idCols that are absent from the experiment\n   TranscriptsERCCOnly = TranscriptsERCCOnly[match(idCols$Feature,\n                                                  TranscriptsERCCOnly$Feature),]\n   Transcripts = rbind(TranscriptsERCCOnly, TranscriptsHumanOnly)\n   print(dim(Transcripts))\n   print(length(grep(\"ERCC-\",Transcripts$Feature)))\n   ###############################################################################################################\n   \n   # Generate the Design Matrix for the table\n   # example name is SEQC_ILM_BGI_A_1_L01_ATCACG_AC0AYTACXX\n   designMat = getDesignMat(TranscriptsERCCOnly, \n                            factorList = c(\"Study\",\"Platform\",\"Site\",\"Sample\",\n                                           \"Library\",\"Lane\",\"Barcode\",\n                                           \"Flowcell\"), patternSplit = '_')\n   if (sampleInfo$platform == \"ROC\"){\n     designMat = getDesignMat(TranscriptsERCCOnly,\n                              factorList = c(\"Sample\",\"Library\",\"Replicate\",\n                                             \"Site\"), patternSplit = '_')\n   }\n   # Subset just the A and B samples for Count Matrix and the designMatrix\n   select = subset(designMat, (Sample == sampleInfo$sample1Name)|(Sample == sampleInfo$sample2Name))\n   select <- as.data.frame(lapply(select,as.character))\n   select <- as.data.frame(lapply(select,as.factor))\n   designMatAll = select\n   dataAB = Transcripts[-c(1)]\n   TranscriptsAB = cbind(Transcripts[c(1)],dataAB[c(match(select$countSet,\n                                                          names(dataAB)))])\n   \n   # Change the sample names to UHRR and HBRR first\n   colnames(TranscriptsAB) <- gsub(pattern = \"_A_\",replacement=\"_UHRR_\",\n                                   x=colnames(TranscriptsAB))\n   colnames(TranscriptsAB) <- gsub(pattern = \"_B_\",replacement=\"_HBRR_\",\n                                   x=colnames(TranscriptsAB))\n   \n   if(sampleInfo$platform == \"ROC\"){\n     colnames(TranscriptsAB) <- gsub(pattern = \"A_\",replacement=\"UHRR_\",\n                                     x=colnames(TranscriptsAB))\n     colnames(TranscriptsAB) <- gsub(pattern = \"B_\",replacement=\"HBRR_\",\n                                     x=colnames(TranscriptsAB))\n     \n   }\n   sample1 = \"UHRR\";sample2 = \"HBRR\";\n   \n   designMatAB = getDesignMat(TranscriptsAB,\n                              factorList = c(\"Study\",\"Platform\",\"Site\",\"Sample\",\n                                             \"Library\",\"Lane\",\"Barcode\",\n                                             \"Flowcell\"), patternSplit = '_')\n   if (sampleInfo$platform == \"ROC\"){\n     designMatAB = getDesignMat(TranscriptsAB,\n                                factorList = c(\"Sample\",\"Library\",\"Replicate\",\n                                               \"Site\"), patternSplit = '_')\n   }\n   if(sampleInfo$platform != \"ROC\"){\n     mainReads$sampleName <- gsub(pattern = \"_A_\", replacement=\"_UHRR_\",\n                                  x=mainReads$sampleName)\n     mainReads$sampleName <- gsub(pattern = \"_B_\", replacement=\"_HBRR_\",\n                                  x=mainReads$sampleName)\n     totalReads = mainReads$numReads[c(match(designMatAB$countSet,\n                                             mainReads$sampleName))]  \n   }else{\n     mainReads$sampleName <- colnames(TranscriptsAB)[-1]\n     totalReads = mainReads$TotalReads[c(match(designMatAB$countSet,\n                                               mainReads$sampleName))]\n     print(totalReads)\n   }\n   ### Reset TranscriptsAB and designMatAB to have the Lab# naming scheme\n   colnames(TranscriptsAB) <- gsub(pattern = oldName, \n                                   replacement=sampleInfo$siteName,\n                                   x=colnames(TranscriptsAB))\n   designMatAB = getDesignMat(TranscriptsAB,\n                              factorList = c(\"Study\",\"Platform\",\"Site\",\"Sample\",\n                                             \"Library\",\"Lane\",\"Barcode\",\n                                            \"Flowcell\"), patternSplit = '_')\n   if (sampleInfo$platform == \"ROC\"){\n     colnames(TranscriptsAB) <- gsub(pattern = oldName, \n                                     replacement=sampleInfo$siteName,\n                                     x = colnames(TranscriptsAB))\n     designMatAB = getDesignMat(TranscriptsAB,\n                                factorList = c(\"Sample\",\"Library\",\"Replicate\",\n                                               \"Site\"), patternSplit = '_')\n   }\n   \n   \n }\n if (sampleInfo$study == \"SEQC_RatTox\"){\n   Transcripts <- read.delim(\"Data/RatToxSEQC/SEQC_TGx_GeneCounts_JMEEHAN.txt\")\n   # force names to be ERCC- and first column name to Feature\n   names(Transcripts)[1] = \"Feature\"\n   Transcripts$Feature = gsub(\"ERCC_\",\"ERCC-\",Transcripts$Feature)\n   Transcripts$Feature = gsub(\":Gene_AceView08\",\"\",Transcripts$Feature)\n   Transcripts$Feature = gsub(\":Gene_RefSeq\",\"\",Transcripts$Feature)\n   # get the total reads per sample (from sequence files prior to mapping)\n   ratToxReads <- read.csv(\"Data/RatToxSEQC/RatToxTotalReads54subset21.csv\")\n   \n   #############################################################################\n   \n   # get data frames with just the ERCCs and just the human genes\n   TranscriptsERCCOnly = Transcripts[c(grep(\"ERCC-0\", Transcripts$Feature)),]\n   TranscriptsHumanOnly = Transcripts[-c(grep(\"ERCC-0\", Transcripts$Feature)),]\n   \n   # Remove ERCCs in the definition file that absent from count data file\n   idCols = idCols[match(TranscriptsERCCOnly$Feature,idCols$Feature),]\n   \n   # Remove ERCCs without a Ratio\n   idCols = idCols[which(is.finite(idCols$Ratio)),]\n   \n   # Remove ERCCs from count data and idCols that are absent from the experiment\n   TranscriptsERCCOnly = TranscriptsERCCOnly[match(idCols$Feature,\n                                                  TranscriptsERCCOnly$Feature),]\n   Transcripts = rbind(TranscriptsERCCOnly, TranscriptsHumanOnly)\n   \n################################################################################\n   \n   # Generate the Design Matrix for the table,\n   # example name is SEQC_ILM_BGI_A_1_L01_ATCACG_AC0AYTACXX\n   if(sampleInfo$analysis == \"RatTox\"){\n     designMat = getDesignMat(TranscriptsERCCOnly, \n                              factorList = c(\"Site\",\"PI\",\"Flowcell\",\"Barcode\",\n                                             \"Tissue\",\"Chemical\",\"Vehicle\",\n                                             \"Route\",\"SeqBarcode\",\"Lane\"),\n                              patternSplit = '_')\n   }\n   sample1 <- sampleInfo$sample1Name \n   sample2 <- sampleInfo$sample2Name\n   # Subset to get A and B samples for the Count Matrix and for the designMatrix\n   if ((sample1 == \"NIT\")|(sample1 == \"THI\")){\n     select1 = subset(designMat,(Chemical == sample1)&(Vehicle == \"NN\")\n                      &(Route == \"IP\"))\n     print(select1)\n     select2 = subset(designMat,(Chemical == sample2)&(Flowcell == \"AB029JACXX\")\n                      &(Vehicle == \"NN\")&(Route == \"IP\")&\n                        ((Lane == \"s_4\")|(Lane == \"s_6\")|(Lane == \"s_1\")))\n     print(select2)\n     select = rbind(select1,select2)  \n   }\n   if((sample1 == \"3ME\")|(sample1 == \"MET\")|(sample1 == \"NAP\")){\n     select1 = subset(designMat,(Chemical == sample1)&(Vehicle == \"NN\")\n                      &(Route == \"OG\"))\n     print(select1)\n     select2 = subset(designMat,(Chemical == sample2)&(Flowcell == \"AB029JACXX\")\n                      &(Vehicle == \"NN\")&(Route == \"OG\"))\n     print(select2)\n     select = rbind(select1,select2)\n   }\n   \n   select <- as.data.frame(lapply(select,as.character))\n   select <- as.data.frame(lapply(select,as.factor))\n   \n   designMatAB = select\n   \n   dataAB = Transcripts[-c(1)]\n   TranscriptsAB = cbind(Transcripts[c(1)],dataAB[c(match(select$countSet,\n                                                          names(dataAB)))])\n   totalReads = ratToxReads$total_reads[c(match(select$countSet,\n                                                ratToxReads$Alt_ID))]\n  \n   dataAB <- TranscriptsAB[-c(1)]\n   colnames(dataAB)<-paste(rep(c(sample1,sample2),each=ncol(dataAB)/2),\n                           c(1:(ncol(dataAB)/2),1:(ncol(dataAB)/2)),sep=\"_\")\n   print(colnames(dataAB))\n   \n   TranscriptsAB <- cbind(Feature = TranscriptsAB$Feature, dataAB)\n   designMatAll <- designMatAB\n }\n   idxsample <- which((rowMeans(TranscriptsAB[-c(1)])>1)&(rowSums(\n     TranscriptsAB[-c(1)]==0)<=2))\n   \n   TranscriptsAB <- TranscriptsAB[idxsample,]\n   \n   TranscriptsAB$Feature <- as.factor(as.character(TranscriptsAB$Feature))\n   \n   measERCCs <- TranscriptsAB$Feature[grep(\"ERCC-0\", TranscriptsAB$Feature)]\n   \n   insuffDat <- setdiff(idCols$Feature, measERCCs)\n   \n   print(paste(\"Transcripts were removed with a mean count < 1 or more than 2\",\n               \"replicates with 0 counts.\")) \n   print(paste(\"A total of\",length(insuffDat),\"out of\",length(idCols$Feature),\n               \"ERCC controls were filtered\"))\n   print(\"The excluded ERCCs are:\")\n   print(insuffDat)\n   print(paste(\"The remaining\",length(measERCCs),\"ERCC controls were analyzed\"))   \n  \n  if(sampleInfo$analysis == \"RatTox\"){\n    designMatSum <- getDesignMat(expressionData = TranscriptsAB,\n                                 factorList = c(\"Sample\",\"Replicate\"),\n                                 patternSplit = '_')\n  }else{\n    designMatSum <- NULL\n  }\n    \n  # write Transcript csv file to directory\n  #write.csv(TranscriptsAB, paste(sampleInfo$filenameRoot,\"Transcripts.csv\",sep=\".\"),\n  #          row.names = F)\n  # collect everything to add to expDat\n  expDat = append(expDat, list(TranscriptsAB = TranscriptsAB,\n                               designMatAB = designMatAB, \n                               designMatSum = designMatSum,\n                               sampleNames = c(sample1,sample2),\n                               idCols = idCols,\n                               totalReads = totalReads))\n  return(expDat)\n#   return(list(TranscriptsAB = TranscriptsAB, designMatAB = designMatAB, \n#                designMatAll = designMatAll, designMatSum = designMatSum,\n#                sample1 = sample1, sample2 = sample2, idCols = idCols, \n#                totalReads = totalReads))\n\n}",
    "created" : 1387217530807.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "792034481",
    "id" : "4FFA57B",
    "lastKnownWriteTime" : 1387224520,
    "path" : "~/Documents/NISTMunro/Projects/erccdashboard/R/loadExpMeasFromRaw.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}