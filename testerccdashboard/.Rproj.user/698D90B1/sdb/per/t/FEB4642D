{
    "contents" : "##############################################################################\n# Analysis of Rat Toxicogenomics data from SEQC\n##############################################################################\n# Run the following at the command line with necessary adjustments and then \n# source this script for the ERCC dashboard diagnostics\n\nsampleInfo = list(study = \"SEQC_RatTox\", #\n                  siteName = \"COH\", # \n                  platform = \"ILM\", #\n                  analysis = \"RatTox\", #\n                  sample1 = \"NIT\", # \n                  sample2 = \"CTL\", #\n                  DEtest = T, #\n                  totalSeqReads = T, #\n                  choseFDR = 0.1, #\n                  printPDF = F, #\n                  FCcode = data.frame(Ratio = c(\"a\",\"b\",\"c\",\"d\"), FC =  c(4,1,.667,.5)), # \n                  myYLimMA = c(-3.5,3.5), #\n                  myXLim = c(-10,15), # \n                  legendLabels = c(\"4:1\",\"1:1\",\"1:1.5\",\"1:2\"), # \n                  ERCCdilution = 1/100, # \n                  spikeVol = 1, #\n                  totalRNAmass = 0.500 # \n                  )\n\n######\n### Explanation of input parameters that can be adjusted for this script\n# totalSeqReads - if TRUE, use the number of sequenced reads in fasta file for library size normalization, if FALSE use number of mapped reads for library size normalization\n# sample1 - can be adjusted for \"NIT\",\"THI\",\"3ME\",\"MET\",\"NAP\"\n# deliveryMet - can be \"NN_IP\" or \"NN_OG\" according to sample1 choice\n# ERCC dilution corresponds to dilution of the Ambion ERCC mixes prior to spiking, if no dilution was performed then ERÃ‡Cdilution = 1\n# spikeVol = the amount of diluted ERCC mix spiked into the total RNA sample, units are in microliters\n# totalRNAmass = mass of total RNA spiked with the diluted ERCC mix, units are in micrograms\n\n#####\n\n\n###############################################################################\n# For NN_IP samples\n# CTL has ERCC Mix 2; Treatments NIT and THI have ERCC Mix 1\n# Same instrument different days for library prep and sequencing for the CTL and Treatment samples\n\n# For NN_OG samples\n# CTL has ERCC Mix 2; Treatments 3ME,MET,NAP, have ERCC Mix 1\n# Same instrument same library prep and sequencing dates for the CTL and Treatment samples\n###############################################################################\n\n# Set all warnings to report as they appear\noptions(warn = 1)\n\n# Get required libraries\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(plyr)\nlibrary(scales)\nlibrary(edgeR)\nlibrary(locfit)\nlibrary(QuasiSeq)\nlibrary(grid)\n\n# Source package scripts\nsource(\"R/combineTechReps.R\") # combine technical replicates\nsource(\"R/compareReps.R\") # compare technical replicates for a sample \nsource(\"R/designMat.R\") # build factor matrix from sample names\nsource(\"R/dynRangePlot.R\") # dose response curve for dynamic range\nsource(\"R/dynRangePlotLODR.R\") # plot dyn Range with LODR\nsource(\"R/est_LODR.R\") # estimate LODR\nsource(\"R/est_r_m.R\") # estimate r_m\nsource(\"R/loadERCCInfo.R\") # load ERCC definition files\n#source(\"R/loadExpMeas.R\") # load expression measures from file\nsource(\"R/loadExpMeasEdit.R\") # load expression measures from file\nsource(\"R/maConcPlot.R\") # MA plot coded with LODR\nsource(\"R/multiplot.R\") # plot multiple plots on the same page\nsource(\"R/printLODRres.R\") # print LODR results table\nsource(\"R/QL.results.R\")# load the updated QL.results function for QuasiSeq \nsource(\"R/rocPlot.R\") # ROC Plot\nsource(\"R/testDE.R\") # test for DE, obtain p and q values\nsource(\"R/dashboardPDF.R\") #\nsource(\"R/prepERCCDat.R\") #\n###############################################################################################################\n\nsampleInfo <- dashboardPDF(sampleInfo)\n\n###############################################################################################################\n\n# Run loadERCCInfo function to obtain ERCC information\nerccInfo <- loadERCCInfo()\n\n###############################################################################################################\n# Run loadExpMeas function to process count data file\nexpDat <- loadExpMeas()\n\n###############################################################################################################\n\nexpDat <- prepERCCDat()\n\n###############################################################################################################\n# Dynamic Range Plots of Sample Biological Replicates\n###############################################################################################################\n\nprint(\"Check for sample mRNA fraction differences...\")\n\n\n  ### Estimate r_m for the sample pair using a negative binomial glm\n  r_m.res = est_r_m(printPlot = T)\n\n  #Return the mean estimate of r_m\n  r_m.mn = r_m.res$r_m.mn\n\n  #Return the upper bound of the 95% confidence interval for r_m\n  r_m.upper = r_m.res$r_m.upper\n\n  #Return the lower bound of the 95% confidence interval for r_m\n  r_m.lower = r_m.res$r_m.lower\n\n  # Return the r_m adjusted concentrations in idCols\n  idColsAdj = r_m.res$idCols\n  \n###############################################################################################################\n\n### Generate new design matrix \n  designMatSum <- generateDesignMat(TranscriptsAB, factorList = c(\"Sample\",\"Replicate\"), patternSplit = '_')\n\n###############################################################################################################\n\n### Evaluate dynamic range\nprint(\"Signal-Abundance Plots for dynamic range estimation...\")\n\n  dynRangeDat = dynRangePlot(expressDat = expressDat, designMat = designMatSum,idCols = idColsAdj, sampleNames = c(sample1,sample2),FCcode = FCcode, legendLabels = legendLabels,myXLim = myXLim, myYLim = NULL, indivxlabel = ERCCxlabelIndiv, avexlabel= ERCCxlabelAve)\n\n\n  print(dynRangeDat$fit.coeff)\n  fit.coeff = dynRangeDat$fit.coeff\n  dynRangeRes <- dynRangeDat[[4]]\n  \n  if(totalSeqReads == F){\n  sampleLibeSums = colSums(TranscriptsAB[-c(1)],na.rm =T)\n  mnLibeFactor = (mean(as.vector(sampleLibeSums)))/10^6\n  print(\"Using total mapped reads mean library size = \")\n  print(mnLibeFactor)\n  }else{\n  mnLibeFactor = (mean(as.vector(totalReads)))/10^6\n  print(\"Using total sequencing reads mean library size = \")\n  print(mnLibeFactor)\n  sampleLibeSums = totalReads\n  }\n  \n  \n  libeSize <- sampleLibeSums\n  datCols = TranscriptsAB[-c(1)]\n  libAdjust = sweep(datCols, 2, libeSize,\"/\")\n  sampleLibeDataNorm = cbind(TranscriptsAB[c(1)],libAdjust)\n  myDataERCC = sampleLibeDataNorm\n  expressDat = myDataERCC[-c(1)] \n  sampleNameList = c(sample1,sample2)\n  libenum = c(\"1\",\"2\",\"3\") # set for n = 3, will need to make flexible if n > 3\n  expressDatAandBERCCs = merge(idColsAdj[c(1,4)],myDataERCC)\n  expressDatAandBERCCs$Feature <- as.factor(as.character(expressDatAandBERCCs$Feature))\n  expressDat = expressDatAandBERCCs[-c(1:2)]\n  expressDatSampleAB = expressDatAandBERCCs[c(1:2)]\n  \n  # Create long data frame of counts for each library in a for loop\n  for (libe in 1:length(libenum)){\n    if(libe == 1){\n      select = subset(designMatSum, (Replicate == libenum[libe]))\n      select <- as.data.frame(lapply(select,as.character))\n      select <- as.data.frame(lapply(select,as.factor))\n      expressDatForSum = expressDat[c(match(select$countSet, names(expressDat)))]\n      expressDatSampleAdd = cbind(expressDatSampleAB, expressDatForSum)\n      expressDatSampleAdd$Library = libe\n      names(expressDatSampleAdd)[3:4]= c(sample1,sample2)\n    }else{\n      select = subset(designMatSum, (Replicate == libenum[libe]))\n      select <- as.data.frame(lapply(select,as.character))\n      select <- as.data.frame(lapply(select,as.factor))\n      expressDatForSum = expressDat[c(match(select$countSet, names(expressDat)))]\n      #meanCounts = data.frame(rowMeans(expressDatForSum))\n      addRows = cbind(expressDatSampleAB[c(1:2)],expressDatForSum)\n      addRows$Library = libe\n      #print(addRows)\n      names(addRows)[3:4]= c(sample1,sample2)\n      expressDatSampleAdd = rbind(expressDatSampleAdd,addRows )  \n    } \n  }\n  expressDatSampleAdd$Library = as.factor(expressDatSampleAdd$Library)\n  expressDatSampleAdd$Feature = as.factor(expressDatSampleAdd$Feature)\n\n###############################################################################################################\n  \n  # Test for differential expression if DEtest == T\n  # else use existing pvalues of the data in csv files\n  if (DEtest == TRUE){\n    suppressWarnings(testDE(filenameRoot = filenameRoot, cnt = TranscriptsAB, info = designMatAB, idCols = idColsAdj, FCcode = FCcode, r_m.mn = r_m.mn, totalSeqReads = totalSeqReads, totalReads = totalReads, legendLabels = legendLabels))\n  }\n  if (DEtest == FALSE){\n    print(\"Not testing for differential expression, no dispersion plots will be produced and pre-existing DE test result files will be used for additional analysis\")\n  }\n \ndeRes <- read.csv(file = paste(filenameRoot,\"quasiSeq.res.csv\",sep=\".\"))\np.thresh<-.1\n\nif(any(deRes$qvals<choseFDR)) p.thresh<-max(deRes$pvals[deRes$qvals<choseFDR])\nprint(\"Threshold P-value\")\nprint(p.thresh)\nif (p.thresh > .1){\n  print(paste(\"Threshold P-value is high for the chosen FDR of \", as.character(choseFDR)))\n  print(\"The sample comparison indicates a large amount of differential expression in the measured transcript populations\")\n}\n\n  # Find LODR estimates using the ERCC data pvalues\n  lodr.ERCC = findLODR(pval.cutoff=p.thresh, prob=.9,filenameRoot=filenameRoot, kind=\"ERCC\", FCcode = FCcode, legendLabels = legendLabels)\n  \n  # Find LODR estimates using data pvalues simulated from endogenous transcripts\n  lodr.Sim = findLODR(pval.cutoff=p.thresh, prob=.9,filenameRoot=filenameRoot, kind=\"Sim\", FCcode = FCcode, legendLabels = legendLabels)  \n  \n  LODR.print.res.ERCC <- printLODRres(lodr.res = lodr.ERCC, fit.coeff = fit.coeff, mnLibeFactor = mnLibeFactor,FCcode = FCcode, legendLabels = legendLabels)\n  print(LODR.print.res.ERCC[[1]])\n  \n###############################################################################################################\n  ### Annotate the dynamic range plots to show how LODR is used to estimate spike in concentration\n  #Move legend\n  dynRangePlotLODR(dynRangeRes = dynRangeRes,lodrDat = LODR.print.res.ERCC[[1]], folds = FCcode, legendLabels = legendLabels)\n \n \n###############################################################################################################\n\n  ### Generate MA plots of erccs coded by concentrations from LODR\n    \n  maPlotAB = maConcPlot(idCols=idColsAdj,siteName = siteName, analysis = analysis, countPair = expressDatSampleAdd, r_m.mn = exp(r_m.mn),r_m.UL = exp(r_m.upper),r_m.LL = exp(r_m.lower), sample1 = sample1,sample2 = sample2, myYLim = myYLimMA, myXLim=myXLim, replicate = T, cutoffs = LODR.print.res.ERCC[[2]], FCcode = FCcode, legendLabels=legendLabels, avexlabel = ERCCxlabelAve, spikeFraction = spikeFraction)\n\n  print(\"Plotting MA plot with coding\")\n  print(maPlotAB[[1]])\n  sdGlobal = maPlotAB$sdGlobal\n  modRatVar = maPlotAB$stdevCoef\n###############################################################################################################\n# Generate ROC curves for the selected differential ratios\n  erccROC.res = erccROC(filenameRoot = filenameRoot, kind = \"ERCC\", legendLabels = legendLabels, idCols = idColsAdj)\n  print(erccROC.res$ROCplot)\n  AUCdat = erccROC.res$AUCdat\n\n###############################################################################################################\n# name and consolidate metrics for the interlaboratory comparison\n  nam <- paste(filenameRoot, \"AUC\",sep = \".\")\n  assign(nam,AUCdat)\n\n  nam <- paste(filenameRoot, \"lodr.ERCC\",sep = \".\")\n  assign(nam,lodr.ERCC)\n  \n  nam <- paste(filenameRoot, \"sdGlobal\",sep = \".\")\n  assign(nam,sdGlobal)\n  \n  nam <- paste(filenameRoot, \"modRatVar\",sep = \".\")\n  assign(nam,modRatVar)\n  \n  nam <- paste(filenameRoot, \"r_m\",sep = \".\")\n  assign(nam,r_m.mn)\n\n  nam <- paste(filenameRoot, \"r_m_lower\",sep = \".\")\n  assign(nam,r_m.lower)\n\n  nam <- paste(filenameRoot, \"r_m_upper\",sep = \".\")\n  assign(nam,r_m.upper)\n\n  nam <- paste(filenameRoot, \"p.thresh\",sep = \".\")\n  assign(nam,p.thresh)\n\n###############################################################################################################\nif (printPDF == T){\n  dev.off()  \n}\n\nto.save <- ls()\n\nsave(list = to.save[grepl(pattern = filenameRoot,x=to.save)],file=paste(filenameRoot,\"RData\",sep = \".\"))\n\n###########  END OF SCRIPT  ###############\n\n",
    "created" : 1377142918308.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3269456894",
    "id" : "FEB4642D",
    "lastKnownWriteTime" : 1377150636,
    "path" : "/Volumes/POMONA/testerccdashboard/dashboardScripts/130821_ERCCDashboard_RatTgx_draft.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}