{
    "contents" : "loadExpMeas <- function(){\n  attach(sampleInfo)\n  attach(erccInfo)\n  #idCols <- erccIdCols$idCols \n # Import data based on analysis type from SEQC main project\n \n  if (study == \"SEQC_Main\"){\n   # Get total Reads (from the original fastq files)\n   if(totalSeqReads == T){\n     if(platform != \"ROC\"){\n       mainReads = read.delim(paste(\"Data/MainSEQC/all_qc_results/\",platform,\"_\",siteName,\"_qc_results.txt\", sep=\"\"))\n       mainReads = mainReads[c(1:9)]\n       if(analysis == \"NIST\"){\n         if (siteName == \"NWU\") mainReads$sampleName <- sub(\"_NWU00001.*\",\"\", mainReads$sampleName)\n         if (siteName == \"SQW\") mainReads$sampleName <- sub(\"_23311016_20120217.*\",\"\", mainReads$sampleName)\n         if (siteName == \"PSU\") mainReads$sampleName <- sub(\"_23302023_20120308.*\",\"\", mainReads$sampleName) \n       }  \n     }else{\n       mainReads = read.delim(\"Data/MainSEQC/RocheResults/Mappability.txt\", sep = \" \")\n       mainReads = mainReads[c(1,2,4,5)]\n       colnames(mainReads) <- c(\"Site\",\"Sample\", \"Replicate\",\"TotalReads\") \n     }\n   }\n   if (analysis == \"NCTR\"){\n     dataFile = paste(\"Data/MainSEQC/SEQC_MAIN_ILM_rawCounts_ZSu.2012_04_14/SEQC_MAIN_ILM_\",siteName,\"_TranscriptCounts_ZSU.txt\", sep = \"\")\n     Transcripts = read.delim(dataFile)\n   }\n   if (analysis == \"NIST\"){\n     dataFile = paste(\"Data/MainSEQC/SEQC_LifescopeCounts/SEQC_LIF_\",siteName,\"_LifeScope.csv\", sep = \"\")\n     Transcripts = read.csv(dataFile, header = T)\n     newColnames <- colnames(Transcripts)\n     #colnames(Transcripts) <- sub(\"_F3.*\",\"\", newColnames)\n     if (siteName == \"NWU\") colnames(Transcripts) <- sub(\"_NWU00001.*\",\"\", newColnames)\n     if (siteName == \"SQW\") colnames(Transcripts) <- sub(\"_23311016_20120217.*\",\"\", newColnames)\n     if (siteName == \"PSU\") colnames(Transcripts) <- sub(\"_23302023_20120308.*\",\"\", newColnames)\n   } \n   if(analysis == \"WEHI\"){\n        dataFile = \"Data/MainSEQC/RocheResults/RefSeq-All-Genes.txt\"\n        Transcripts = read.delim(dataFile, header = T)\n        dataAB = Transcripts[-c(1)]\n        Transcripts =cbind(Transcripts[c(1)], dataAB[order(colnames(dataAB))])\n        print(head(Transcripts))\n   }\n   \n   # force names to be ERCC- and first column name to Feature\n   names(Transcripts)[1] = \"Feature\"\n   Transcripts$Feature = gsub(\"ERCC_\",\"ERCC-\",Transcripts$Feature)\n   Transcripts$Feature = gsub(\":Gene_AceView08\",\"\",Transcripts$Feature)\n   Transcripts$Feature = gsub(\":Gene_RefSeq\",\"\",Transcripts$Feature)\n\n   # get data frames with just the ERCCs and just the human genes\n   TranscriptsERCCOnly = Transcripts[c(grep(\"ERCC-0\", Transcripts$Feature)),]\n   TranscriptsHumanOnly = Transcripts[-c(grep(\"ERCC-0\", Transcripts$Feature)),]\n   \n   # Check for and remove ERCCs in the definition file that are not in the count data file\n   idCols = idCols[match(TranscriptsERCCOnly$Feature,idCols$Feature),]\n   \n   # Remove ERCCs without a Ratio\n   idCols = idCols[which(is.finite(idCols$Ratio)),]\n   \n   # Remove ERCCs from count data and idCols that are not present in the experiment\n   TranscriptsERCCOnly = TranscriptsERCCOnly[match(idCols$Feature,TranscriptsERCCOnly$Feature),]\n   Transcripts = rbind(TranscriptsERCCOnly, TranscriptsHumanOnly)\n   \n   ###############################################################################################################\n   \n   # Generate the Design Matrix for the table example name is SEQC_ILM_BGI_A_1_L01_ATCACG_AC0AYTACXX\n   designMat = generateDesignMat(TranscriptsERCCOnly, factorList = c(\"Study\",\"Platform\",\"Site\",\"Sample\",\"Library\",\"Lane\",\"Barcode\",\"Flowcell\"), patternSplit = '_')\n   if (platform == \"ROC\"){\n     designMat = generateDesignMat(TranscriptsERCCOnly, factorList = c(\"Sample\",\"Library\",\"Replicate\", \"Site\"), patternSplit = '_')\n   }\n   # Subset to get just the A and B samples for the Count Matrix and for the designMatrix\n   select = subset(designMat, (Sample == sample1)|(Sample == sample2))\n   select <- as.data.frame(lapply(select,as.character))\n   select <- as.data.frame(lapply(select,as.factor))\n   designMatAll = select\n   dataAB = Transcripts[-c(1)]\n   TranscriptsAB = cbind(Transcripts[c(1)],dataAB[c(match(select$countSet, names(dataAB)))])\n   \n   # Change the sample names to UHRR and HBRR first\n   colnames(TranscriptsAB) <- gsub(pattern = \"_A_\",replacement=\"_UHRR_\",x=colnames(TranscriptsAB))\n   colnames(TranscriptsAB) <- gsub(pattern = \"_B_\",replacement=\"_HBRR_\",x=colnames(TranscriptsAB))\n   if(platform == \"ROC\"){\n     colnames(TranscriptsAB) <- gsub(pattern = \"A_\",replacement=\"UHRR_\",x=colnames(TranscriptsAB))\n     colnames(TranscriptsAB) <- gsub(pattern = \"B_\",replacement=\"HBRR_\",x=colnames(TranscriptsAB))\n   }\n   sample1 = \"UHRR\";sample2 = \"HBRR\";\n   \n   designMatAB = generateDesignMat(TranscriptsAB, factorList = c(\"Study\",\"Platform\",\"Site\",\"Sample\",\"Library\",\"Lane\",\"Barcode\",\"Flowcell\"), patternSplit = '_')\n   if (platform == \"ROC\"){\n     designMatAB = generateDesignMat(TranscriptsAB, factorList = c(\"Sample\",\"Library\",\"Replicate\", \"Site\"), patternSplit = '_')\n   }\n   if(platform != \"ROC\"){\n     mainReads$sampleName <- gsub(pattern = \"_A_\", replacement=\"_UHRR_\",x=mainReads$sampleName)\n     mainReads$sampleName <- gsub(pattern = \"_B_\", replacement=\"_HBRR_\",x=mainReads$sampleName)\n     totalReads = mainReads$numReads[c(match(designMatAB$countSet,mainReads$sampleName))]  \n   }else{\n     mainReads$sampleName <- colnames(TranscriptsAB)[-1]\n     totalReads = mainReads$TotalReads[c(match(designMatAB$countSet, mainReads$sampleName))]\n     print(totalReads)\n   } \n   \n }\n if (study == \"SEQC_RatTox\"){\n   Transcripts <- read.delim(\"Data/RatToxSEQC/SEQC_TGx_GeneCounts_JMEEHAN.txt\")\n   # force names to be ERCC- and first column name to Feature\n   names(Transcripts)[1] = \"Feature\"\n   Transcripts$Feature = gsub(\"ERCC_\",\"ERCC-\",Transcripts$Feature)\n   Transcripts$Feature = gsub(\":Gene_AceView08\",\"\",Transcripts$Feature)\n   Transcripts$Feature = gsub(\":Gene_RefSeq\",\"\",Transcripts$Feature)\n   # get the total reads per sample (from sequence files prior to mapping)\n   ratToxReads <- read.csv(\"Data/RatToxSEQC/RatToxTotalReads54subset21.csv\")\n   \n   ###############################################################################################################\n   \n   # get data frames with just the ERCCs and just the human genes\n   TranscriptsERCCOnly = Transcripts[c(grep(\"ERCC-0\", Transcripts$Feature)),]\n   TranscriptsHumanOnly = Transcripts[-c(grep(\"ERCC-0\", Transcripts$Feature)),]\n   \n   # Check for and remove ERCCs in the definition file that are not in the count data file\n   idCols = idCols[match(TranscriptsERCCOnly$Feature,idCols$Feature),]\n   \n   # Remove ERCCs without a Ratio\n   idCols = idCols[which(is.finite(idCols$Ratio)),]\n   \n   # Remove ERCCs from count data and idCols that are not present in the experiment\n   TranscriptsERCCOnly = TranscriptsERCCOnly[match(idCols$Feature,TranscriptsERCCOnly$Feature),]\n   Transcripts = rbind(TranscriptsERCCOnly, TranscriptsHumanOnly)\n   \n   ###############################################################################################################\n   \n   # Generate the Design Matrix for the table example name is SEQC_ILM_BGI_A_1_L01_ATCACG_AC0AYTACXX\n   if(analysis == \"RatTox\"){\n     designMat = generateDesignMat(TranscriptsERCCOnly, factorList = c(\"Site\",\"PI\",\"Flowcell\",\"Barcode\",\"Tissue\",\"Chemical\",\"Vehicle\",\"Route\",\"SeqBarcode\",\"Lane\"), patternSplit = '_')\n   }\n   \n   # Subset to get just the A and B samples for the Count Matrix and for the designMatrix\n   if ((sample1 == \"NIT\")|(sample1 == \"THI\")){\n     select1 = subset(designMat, (Chemical == sample1)&(Vehicle == \"NN\")&(Route == \"IP\"))\n     print(select1)\n     select2 = subset(designMat, (Chemical == sample2)&(Flowcell == \"AB029JACXX\")&(Vehicle == \"NN\")&(Route == \"IP\")&((Lane == \"s_4\")|(Lane == \"s_6\")|(Lane == \"s_1\")))\n     print(select2)\n     select = rbind(select1,select2)  \n   }\n   if((sample1 == \"3ME\")|(sample1 == \"MET\")|(sample1 == \"NAP\")){\n     select1 = subset(designMat, (Chemical == sample1)&(Vehicle == \"NN\")&(Route == \"OG\"))\n     print(select1)\n     select2 = subset(designMat, (Chemical == sample2)&(Flowcell == \"AB029JACXX\")&(Vehicle == \"NN\")&(Route == \"OG\"))\n     print(select2)\n     select = rbind(select1,select2)\n   }\n   \n   select <- as.data.frame(lapply(select,as.character))\n   select <- as.data.frame(lapply(select,as.factor))\n   \n   designMatAB = select\n   \n   dataAB = Transcripts[-c(1)]\n   TranscriptsAB = cbind(Transcripts[c(1)],dataAB[c(match(select$countSet, names(dataAB)))])\n   totalReads = ratToxReads$total_reads[c(match(select$countSet,ratToxReads$Alt_ID))]\n  \n   dataAB <- TranscriptsAB[-c(1)]\n   colnames(dataAB)<-paste(rep(c(sample1,sample2),each=ncol(dataAB)/2),c(1:(ncol(dataAB)/2),1:(ncol(dataAB)/2)),sep=\"_\")\n   print(colnames(dataAB))\n   \n   TranscriptsAB <- cbind(Feature = TranscriptsAB$Feature, dataAB)\n   designMatAll <- designMatAB\n }\n   idxsample <- which((rowMeans(TranscriptsAB[-c(1)])>1)&(rowSums(TranscriptsAB[-c(1)]!=0)>=2))\n   TranscriptsAB <- TranscriptsAB[idxsample,]\n   \n   TranscriptsAB$Feature <- as.factor(as.character(TranscriptsAB$Feature))\n   \n   measERCCs <- TranscriptsAB$Feature[grep(\"ERCC-0\", TranscriptsAB$Feature)]\n   \n   insuffDat <- setdiff(idCols$Feature, measERCCs)\n   \n   print(\"Transcripts were removed with a mean count < 1 or more than 2 replicates with 0 counts.\") \n   print(paste(\"A total of \",length(insuffDat) ,\" out of \",length(idCols$Feature),\" ERCC controls were filtered\",sep=\"\"))\n   print(\"The excluded ERCCs are:\")\n   print(insuffDat)\n   print(paste(\"The remaining \", length(measERCCs), \" ERCC controls were analyzed\",sep=\"\"))   \n  \n   return(list(TranscriptsAB = TranscriptsAB, designMatAB = designMatAB, designMatAll = designMatAll, sample1 = sample1, sample2 = sample2, idCols = idCols, totalReads = totalReads))\n   # write Transcript csv file to directory\n   write.csv(TranscriptsAB, paste(filenameRoot,\"Transcripts.csv\",sep=\".\"),row.names = F)\n   detach(erccInfo)\n   detach(sampleInfo)\n  \n}",
    "created" : 1377143273717.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3178141281",
    "id" : "67F17427",
    "lastKnownWriteTime" : 1377148080,
    "path" : "/Volumes/POMONA/testerccdashboard/R/loadExpMeasEdit.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}