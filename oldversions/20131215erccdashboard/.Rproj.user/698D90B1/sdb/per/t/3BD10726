{
    "contents" : "est_r_m <- function(printPlot = F){\n  attach(expDat)\n  site = siteName\n  cnt = TranscriptsAB\n  avexlabel = ERCCxlabelAve\n  # requires that the sample1 columns are first in the table -> need to add a stopifnot statement for this \n  theme_update(legend.justification=c(1,0), legend.position=c(1,0))\n  \n  #Create a custom color scale\n  \n  myColors <- c(\"#FF9900\",\"#339966\", \"#6699CC\", \"#CC6666\")\n  names(myColors) <- levels(FCcode$Ratio)\n  colScale <- scale_colour_manual(name = \"Ratio\",values = myColors, labels = legendLabels)\n  fillScale <- scale_fill_manual(name = \"Ratio\", values = myColors, labels = legendLabels)\n  dat = unique(cnt)\n  Features = make.names(dat$Feature,unique=T)\n  Features = gsub(\".\",\"-\", Features, fixed = T)\n  rownames(dat)<-Features; dat<-as.matrix(dat[,-1])\n    \n  colnames(dat)<-paste(rep(c(sample1,sample2),each=ncol(dat)/2),c(1:(ncol(dat)/2),1:(ncol(dat)/2)),sep=\"\")\n  \n  ## Get ERCC names\n  ERCC<-rownames(dat[substr(rownames(dat),1,5)==\"ERCC-\",])\n\n  ## Specify Sample (A or B)\n  trt<-rep(1:2,each=ncol(dat)/2)\n  design.list<-list(trt,rep(1,ncol(dat)))\n  \n  ## Compute offset (e.g. total counts, 75% quantile, TMM, etc)\n  log.offset<-log(colSums(dat))\n # if (erccOnly == T){\n  #  log.offset == colSums(dat[substr(rownames(dat),1,5)==\"ERCC-\",])\n  #}\n  if(totalSeqReads == T){\n    log.offset = log(totalReads)\n  }\n  \n  ######################################################\n  #### Estimate r_m from each ERCC using NegBin GLM ####\n  ######################################################\n  \n  ERCC.FC = idCols[c(1,4)];rownames(ERCC.FC)<-ERCC.FC[,1]\n  ERCC.FC$NomRatio <- 1\n  for (i in 1:nlevels(FCcode$Ratio)){\n    ERCC.FC$NomRatio[which(ERCC.FC$Ratio == as.character(FCcode$Ratio[i]))] = FCcode$FC[i]  \n  }\n  ERCC.Ratio = ERCC.FC[c(1,2)]\n  \n  ERCC.FC = ERCC.FC[-c(2)]\n  \n  library(MASS)\n  print(\"log.offset\")\n  print(log.offset)\n  \n  r_m<-NULL\n  print(\"Number of ERCC Controls Used in r_m estimate\")\n  print(length((1:nrow(dat))[substr(rownames(dat),1,5)==\"ERCC-\"]))\n  #print(dat[(1:nrow(dat))[substr(rownames(dat),1,5)==\"ERCC-\"],])\n  \n  for( i in (1:nrow(dat))[substr(rownames(dat),1,5)==\"ERCC-\"]){ \n  \n#### Obtain estimated log fold-change and corresponding standard error for each ERCC\n    r_m<-rbind(r_m,summary(suppressWarnings(glm.nb(dat[i,]~as.factor(trt)+offset(log.offset))))$coefficients[2,1:2])\n  }\n  \ncolnames(r_m)<-c(\"r_m.hat\",\"r_m.se\"); rownames(r_m)<-rownames(dat)[substr(rownames(dat),1,5)==\"ERCC-\"]\n\n  #### Add nominal log fold change to results\nr_m <- data.frame(r_m)\n  \nr_m$nominal<- - log(ERCC.FC[rownames(r_m),2])\n  \n#### Make 95% CIs based on t-distribution\nquant<-qt(.975,6)\n\n#### Plot log r_m estimates and corresponding 95% CIs\n  r_m$Ratio = ERCC.Ratio$Ratio[match(row.names(r_m), ERCC.Ratio$Feature)]\n  # Subset data frame to remove missing ERCC controls\n  r_m <- subset(r_m, is.finite(Ratio))\n  # weighted mean of the individual means\n  r_m.mn<-sum((r_m[,1]-r_m[,3])/r_m[,2]^2)/sum(r_m[,2]^-2)\n  \n  \n  # standard deviation, sigma of the weighted mean\n  r_m.mn.sd <- sqrt(1/(sum(1/(r_m[,2]^2))))\n  \n  r_m = cbind(as.character(row.names(r_m)), r_m)\n  names(r_m)[1]= \"Feature\"\n  \n  \n  r_m.mnlog = exp(r_m.mn)\n  \n  idCols$Conc2 = r_m.mnlog*idCols$Conc2\n  idColsAve = idCols\n  \n  idColsAve = idCols[match(r_m$Feature,idCols$Feature),]\n  \n  r_m$AveConc = log2((idColsAve$Conc1+ idColsAve$Conc2)/2)\n  \n  r_m = r_m[order(r_m$AveConc),]\n  \n  \n  r_m$ymax = r_m$r_m.hat - r_m$nominal + (quant)*r_m$r_m.se\n  r_m$ymin = r_m$r_m.hat - r_m$nominal - (quant)*r_m$r_m.se\n  textDat = subset(r_m, (r_m.mn<(r_m.hat - nominal - (quant*r_m.se)))|(r_m.mn>(r_m.hat - nominal + (quant*r_m.se))))\n  \n  print(\"Outlier ERCCs for GLM r_m Estimate:\")\n  print(as.character(textDat$Feature))\n  \n  print(paste(site,\"GLM log(r_m) estimate:\"))\n  print(r_m.mn)\n  print(\"GLM log(r_m) estimate standard deviation: \")\n  print(r_m.mn.sd)\n  print(nrow(r_m))\n  r_m.upper.limit = r_m.mn + (quant)*((r_m.mn.sd)/(sqrt(nrow(r_m))))\n  r_m.lower.limit = r_m.mn - (quant)*((r_m.mn.sd)/(sqrt(nrow(r_m))))\n  \n  print(paste(site,\"GLM r_m estimate:\"))\n  print(exp(r_m.mn))\n  \n  print(\"upper limit\")\n  print(exp(r_m.upper.limit))\n  \n  print(\"lower limit\")\n  print(exp(r_m.lower.limit))\n  \n  if (nrow(textDat)>1){\n    plotSiter_m = ggplot(r_m, aes(x = AveConc, y = r_m.hat - nominal, colour =  Ratio)) + geom_point(size = 6, alpha = 0.7) + geom_errorbar(aes(ymin = ymin,ymax = ymax),alpha = 0.7) +  coord_cartesian(xlim = myXLim, ylim = c(-1.5,1.5)) + xlab(avexlabel) + ylab(expression(log(r[m]))) + geom_text(data = textDat, aes(x = AveConc, y = (r_m.hat - nominal), label = gsub(\"ERCC-00\",\"\",Feature)),colour = \"black\", size = 6,show_guide = F,angle = 90) + geom_hline(yintercept = r_m.mn) + colScale  \n  }else{\n    plotSiter_m = ggplot(r_m, aes(x = AveConc, y = r_m.hat - nominal, colour =  Ratio)) + geom_point(size = 6, alpha = 0.7) + geom_errorbar(aes(ymin = ymin,ymax = ymax),alpha = 0.7) +  coord_cartesian(xlim = myXLim, ylim = c(-1.5,1.5)) + xlab(avexlabel) + ylab(expression(log(r[m]))) + geom_hline(yintercept = r_m.mn) + colScale\n  }\n  \n  if(printPlot != F){\n    print(plotSiter_m)  \n  }\n  \n  return(list(r_m.mn = r_m.mn,idCols = idCols, r_m.upper = r_m.upper.limit,r_m.lower = r_m.lower.limit))\n  attach(sampleInfo)\n  attach(expDat)\n}",
    "created" : 1377150059829.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3188754150",
    "id" : "3BD10726",
    "lastKnownWriteTime" : 1377151600,
    "path" : "/Volumes/POMONA/testerccdashboard/R/est_r_m.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}